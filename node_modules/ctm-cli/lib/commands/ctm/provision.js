var environments_1 = require("../../util/environments");
var utils = require("../../util/utilsCore");
var DownloadFile = require("../../util/downloadFile");
var ProcessUtils = require("../../util/processUtils");
var path = require("path");
var $ = utils.getLocaleString;
var provision;
function provisionAction(action, imageName, controlmName, hostName, portName, cli, options) {
    cli.setupOptions(options);
    var log = cli.output;
    cli.setupCommandOutput(["-v"]);
    var jarName = $("control-m.services.provision-%s.jar", utils.packageInfo().version);
    var provisionJarUrl = $("%s/utils/%s", cli.targetUrl, jarName);
    var provisionJarPath = path.resolve(utils.ctmDir(), jarName);
    var javaCommand = "";
    if (!controlmName) {
        controlmName = "";
    }
    if (!hostName) {
        hostName = "";
    }
    if (!portName) {
        portName = "";
    }
    log.debug($("Locating java command"));
    ProcessUtils.locateJavaCommand().then(function (javaLocated) {
        log.info($("Located java at:%s", javaLocated));
        javaCommand = javaLocated;
        log.info($("downloading %s into %s", provisionJarUrl, provisionJarPath));
        var dl = new DownloadFile(provisionJarUrl, provisionJarPath, true);
        return dl.download();
    })
        .then(function (completionMsg) {
        log.info(completionMsg);
        var command = $("%s -jar %s -image \"%s\" -server %s -action %s -environment %s -ctms \"%s\" -name \"%s\" -port \"%s\" -cert %s", javaCommand, provisionJarPath, imageName, cli.targetUrl, action, environments_1.environments.findEnvironmentName(cli.currentEnv), controlmName, hostName, portName, environments_1.environments.getRootCertificateRequired() ? 1 : 0);
        log.debug($("starting command: %s", command));
        return ProcessUtils.exec(log, command, { stdio: "pipe" });
    })
        .then(function () { return log.info($("%s succeeded", action)); })
        .catch(function (error) {
        log.debug($("%s failed: %s", action, error));
        cli.exit(1);
    });
}
function addProvisionAction(name, args, description, action) {
    provision.command(name + " " + args).description(description)
        .option("-e, --environment <env>", "Use <env> environment for this command")
        .execute(action).usage(args);
}
function init(cli) {
    provision = cli.category("provision").description("Install Control-M components");
    addProvisionAction("image", "<image>", "download and install Control-M component", function (imageName, options, _) { return provisionAction("image", imageName, "", "", "", cli, options); });
    addProvisionAction("setup", "[ctm] [name] [port]", "setup the installed component into Control-M", function (ctmName, hostName, portName, options, _) {
        return provisionAction("setup", "", ctmName, hostName, portName, cli, options);
    });
    addProvisionAction("install", "<image> [ctm] [name] [port]", "download, install and setup Control-M component", function (imageName, ctmName, hostName, portName, options, _) {
        return provisionAction("install", imageName, ctmName, hostName, portName, cli, options);
    });
    addProvisionAction("image::remove", " ", "uninstall a Control-M component", function (options, _) { return provisionAction("image::remove", "None", "", "", "", cli, options); });
    addProvisionAction("uninstall", " ", "detach component from Control-M and uninstall", function (options, _) { return provisionAction("uninstall", "", "", "", "", cli, options); });
}
exports.init = init;
//# sourceMappingURL=provision.js.map