"use strict";
var argData_1 = require("../../util/argData");
var utilsCore = require("../../util/utilsCore");
var S = utilsCore.getLocaleString;
exports.init = function (cli) {
    cli.modelsArgs = {
        SuccessData: [
            { description: "The success message that describes the performed action.",
                hidden: false,
                name: "message",
                required: false,
                type: "string" },
        ],
        AddRemoveSuccessData: [
            { description: "The success message that describes the performed action.",
                hidden: false,
                name: "message",
                required: false,
                type: "string" },
            { description: "List of the items remained after the action.",
                hidden: false,
                name: "currentItems",
                required: false,
                type: "Array<string>" },
        ],
        ErrorData: [
            { description: "The error message that describes the problem.",
                hidden: false,
                name: "message",
                required: false,
                type: "string" },
            { description: "An internal identifier of the error.",
                hidden: false,
                name: "id",
                required: false,
                type: "string" },
            { description: "Reference to the item this error is referring to.",
                hidden: false,
                name: "item",
                required: false,
                type: "string" },
            { description: "The file this error occurred in.",
                hidden: false,
                name: "file",
                required: false,
                type: "string" },
            { description: "The number of line in the file this error occurred in.",
                hidden: false,
                name: "line",
                required: false,
                type: "number" },
            { description: "The number of column in the file this error occurred in.",
                hidden: false,
                name: "col",
                required: false,
                type: "number" },
        ],
        CtmDetailsList: [],
        ErrorList: [
            { description: "",
                hidden: false,
                name: "errors",
                required: false,
                type: "Array<ErrorData>" },
        ],
        LoginCredentials: [
            { description: "",
                hidden: false,
                name: "username",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "password",
                required: true,
                type: "string" },
        ],
        LoginResult: [
            { description: "",
                hidden: false,
                name: "username",
                required: false,
                type: "string" },
            { description: "",
                hidden: false,
                name: "token",
                required: false,
                type: "string" },
            { description: "",
                hidden: false,
                name: "version",
                required: false,
                type: "string" },
        ],
        RunResult: [
            { description: "An ID that identifies running jobs and can be used to track their status.",
                hidden: false,
                name: "runId",
                required: true,
                type: "string" },
            { description: "A URI that can be used to get the status of the run jobs.",
                hidden: false,
                name: "statusURI",
                required: false,
                type: "string" },
            { description: "A URI to a page displaying the workflow run live.",
                hidden: false,
                name: "monitorPageURI",
                required: false,
                type: "string" },
        ],
        ReportResult: [
            { description: "A URL to the report.",
                hidden: false,
                name: "reportURL",
                required: true,
                type: "string" },
        ],
        StringListResult: [],
        Host: [
            { description: "The hostname of the agent.",
                hidden: false,
                name: "host",
                required: true,
                type: "string" },
        ],
        KeyValue: [
            { description: "Unique key",
                hidden: false,
                name: "name",
                required: true,
                type: "string" },
            { description: "Any value in string form.",
                hidden: false,
                name: "value",
                required: true,
                type: "string" },
            { description: "The default value if exist.",
                hidden: false,
                name: "defaultValue",
                required: false,
                type: "string" },
        ],
        KeyValueListResult: [],
        ResourceSet: [],
        Resource: [
            { description: "Resource name",
                hidden: false,
                name: "name",
                required: false,
                type: "string" },
            { description: "Control-M Server hosting the resource",
                hidden: false,
                name: "ctm",
                required: false,
                type: "string" },
            { description: "The resource q current quantity.",
                hidden: false,
                name: "available",
                required: false,
                type: "string" },
            { description: "The resource q max usage value.",
                hidden: false,
                name: "max",
                required: false,
                type: "number" },
            { description: "Workload Policy.",
                hidden: false,
                name: "workloadPolicy",
                required: false,
                type: "string" },
        ],
        EventSet: [],
        Event: [
            { description: "Event name",
                hidden: false,
                name: "name",
                required: false,
                type: "string" },
            { description: "Control-M Server hosting the event",
                hidden: false,
                name: "ctm",
                required: false,
                type: "string" },
            { description: "The event date, either date in format dd/mm/yy or a string \&quot;orderdate\&quot;",
                hidden: false,
                name: "date",
                required: false,
                type: "string" },
        ],
        JobStatusResult: [
            { description: "The list of statuses tracked by the given runId.",
                hidden: false,
                name: "statuses",
                required: false,
                type: "Array<JobRunStatus>" },
            { description: "The index of the first item in the list.",
                hidden: false,
                name: "startIndex",
                required: false,
                type: "number" },
            { description: "The maximum number of items returned by each status request.",
                hidden: false,
                name: "itemsPerPage",
                required: false,
                type: "number" },
            { description: "The number of the return items by the search.",
                hidden: false,
                name: "returned",
                required: false,
                type: "number" },
            { description: "The total number of items.",
                hidden: false,
                name: "total",
                required: false,
                type: "number" },
            { description: "The field the list is sorted by.",
                hidden: false,
                name: "sort",
                required: false,
                type: "string" },
            { description: "URI to get the next items in the list, if any.",
                hidden: false,
                name: "nextURI",
                required: false,
                type: "string" },
            { description: "URI to get the previous items in the list, if any.",
                hidden: false,
                name: "prevURI",
                required: false,
                type: "string" },
            { description: "A URI to a page displaying the workflow run live.",
                hidden: false,
                name: "monitorPageURI",
                required: false,
                type: "string" },
        ],
        JobRunStatus: [
            { description: "Order ID of the job.",
                hidden: false,
                name: "jobId",
                required: true,
                type: "string" },
            { description: "Order ID of the folder containing this job.",
                hidden: false,
                name: "folderId",
                required: false,
                type: "string" },
            { description: "The run number (in case of cyclic jobs or reruns)",
                hidden: false,
                name: "numberOfRuns",
                required: false,
                type: "number" },
            { description: "The name of the run job.",
                hidden: false,
                name: "name",
                required: false,
                type: "string" },
            { description: "The name of the run job.",
                hidden: false,
                name: "folder",
                required: false,
                type: "string" },
            { description: "The type of the run job.",
                hidden: false,
                name: "type",
                required: false,
                type: "string" },
            { description: "The status of the run job.",
                hidden: false,
                name: "status",
                required: false,
                type: "string" },
            { description: "The start time of the job run.",
                hidden: false,
                name: "startTime",
                required: false,
                type: "string" },
            { description: "The end time of the job run.",
                hidden: false,
                name: "endTime",
                required: false,
                type: "string" },
            { description: "The JSON string that describes the job.",
                hidden: false,
                name: "jobJSON",
                required: false,
                type: "string" },
            { description: "A URI that can be used to get the output of the run job",
                hidden: false,
                name: "outputURI",
                required: false,
                type: "string" },
            { description: "A URI that can be used to get the log of the run job",
                hidden: false,
                name: "logURI",
                required: false,
                type: "string" },
        ],
        DeploymentFileResults: [
            { description: "The name of a specific deployment file.",
                hidden: false,
                name: "deploymentFile",
                required: false,
                type: "string" },
            { description: "Determines the number of successfully deployed simple folders.",
                hidden: false,
                name: "successfulFoldersCount",
                required: false,
                type: "number" },
            { description: "Determines the number of successfully deployed smart folders.",
                hidden: false,
                name: "successfulSmartFoldersCount",
                required: false,
                type: "number" },
            { description: "Determines the number of successfully deployed sub folders.",
                hidden: false,
                name: "successfulSubFoldersCount",
                required: false,
                type: "number" },
            { description: "Determines the number of successfully deployed sub folders.",
                hidden: false,
                name: "successfulJobsCount",
                required: false,
                type: "number" },
            { description: "Determines the number of successfully deployed sub folders.",
                hidden: false,
                name: "successfulConnectionProfilesCount",
                required: false,
                type: "number" },
            { description: "Determines the number of successfully deployed sub folders.",
                hidden: false,
                name: "successfulDriversCount",
                required: false,
                type: "number" },
            { description: "",
                hidden: false,
                name: "deployedFolders",
                required: false,
                type: "Array<string>" },
            { description: "",
                hidden: false,
                name: "deployedDrivers",
                required: false,
                type: "Array<string>" },
            { description: "",
                hidden: false,
                name: "deployedConnectionProfiles",
                required: false,
                type: "Array<string>" },
            { description: "",
                hidden: false,
                name: "errors",
                required: false,
                type: "Array<DeploymentFileError>" },
        ],
        DeploymentFileError: [
            { description: "",
                hidden: false,
                name: "lines",
                required: false,
                type: "Array<string>" },
        ],
        Sample: [
            { description: "",
                hidden: false,
                name: "id",
                required: true,
                type: "number" },
            { description: "",
                hidden: false,
                name: "title",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "description",
                required: false,
                type: "string" },
        ],
        NewSample: [
            { description: "",
                hidden: false,
                name: "title",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "description",
                required: false,
                type: "string" },
        ],
        SamplesLoadData: [
            { description: "",
                hidden: false,
                name: "contentType",
                required: false,
                type: "string" },
            { description: "",
                hidden: false,
                name: "filename",
                required: false,
                type: "string" },
            { description: "",
                hidden: false,
                name: "size",
                required: false,
                type: "string" },
            { description: "",
                hidden: false,
                name: "content",
                required: false,
                type: "string" },
        ],
        Value: [
            { description: "The parameter value",
                hidden: false,
                name: "value",
                required: true,
                type: "string" },
        ],
        CtmDetails: [
            { description: "The unique name of the Control-M Server.",
                hidden: false,
                name: "name",
                required: false,
                type: "string" },
            { description: "The hostname the Control-M Server is running on.",
                hidden: false,
                name: "host",
                required: false,
                type: "string" },
        ],
        AddAgentParams: [
            { description: "The hostname or alias of the agent machine.",
                hidden: false,
                name: "host",
                required: true,
                type: "string" },
            { description: "The agent&#39;s listening port.",
                hidden: false,
                name: "port",
                required: true,
                type: "number" },
        ],
        EventParam: [
            { description: "",
                hidden: false,
                name: "name",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "date",
                required: true,
                type: "string" },
        ],
        ResourceParam: [
            { description: "",
                hidden: false,
                name: "name",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "max",
                required: true,
                type: "string" },
        ],
        ResourceMax: [
            { description: "",
                hidden: false,
                name: "max",
                required: true,
                type: "number" },
        ],
        AddRemoteHostParams: [
            { description: "The remote host (name) which will execute the commands. REQUIRED.",
                hidden: false,
                name: "remotehost",
                required: false,
                type: "string" },
            { description: "The remote host SSH port.",
                hidden: false,
                name: "port",
                required: false,
                type: "number" },
            { description: "The SSH encrypt algorithm to be used. HIDDEN.",
                hidden: false,
                name: "encryptAlgorithm",
                required: false,
                type: "string" },
            { description: "Is compression used. HIDDEN.",
                hidden: false,
                name: "compression",
                required: false,
                type: "boolean" },
            { description: "authorize SSL remote host while creating the remote host. HIDDEN.",
                hidden: false,
                name: "authorize",
                required: false,
                type: "boolean" },
            { description: "Agents to execute the commands on. HIDDEN.",
                hidden: false,
                name: "agents",
                required: false,
                type: "Array<string>" },
        ],
        OrderFolderParameters: [
            { description: "",
                hidden: false,
                name: "ctm",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "folder",
                required: true,
                type: "string" },
            { description: "",
                hidden: false,
                name: "jobs",
                required: false,
                type: "string" },
        ],
        AgentDetails: [
            { description: "agent machine",
                hidden: false,
                name: "nodeid",
                required: false,
                type: "string" },
            { description: "agent status",
                hidden: false,
                name: "status",
                required: false,
                type: "string" },
        ],
        AgentDetailsList: [
            { description: "",
                hidden: false,
                name: "agents",
                required: false,
                type: "Array<AgentDetails>" },
        ],
    };
    cli.category("samples").description(S("Manage data samples"));
    cli.category("run").description(S("Run and track Control-M jobs"));
    cli.category("config").description(S("Configure the Control-M environment"));
    cli.category("provision").description(S("Install a BigData agent on the current account"));
    cli.category("deploy").description(S("Submit definitions to Control-M"));
    cli.category("build").description(S("Compile definitions to verify they are valid for Control-M"));
    cli.category("deployExperiment").description(S("Submit definitions with promotionrules to Control-M"));
    cli.category("reporting").description(S("Generate Control-M reports"));
    cli.addCommand = function (category, name) {
        return cli.category(category).command(name);
    };
    cli.addOperation("ProvisionApi", "provision", "getImages", "/provision/images/{os}", "Get a list of the images in the system for the requested OS.", "!", "GET", [new argData_1.ArgData("os", "string", true, "The OS name of the requested images.", false, false),
    ], "", "", "", []);
    cli.addOperation("BuildApi", "build", "buildFile", "/build", "Compile the provided definition file (JSON or zip) to verify it is valid for Control-M.", "!", "POST", [new argData_1.ArgData("definitionsFile", "any", true, "A file that contains definitions to be compiled. Can be either a JSON definition file, or a zip file that contains multiple JSON definition files.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "addSecret", "/config/secret", "Add a new secret to the secrets vault.", "", "POST", [new argData_1.ArgData("nameValue", "KeyValue", true, "The new secret value", false, true),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "updateSecret", "/config/secret/{name}", "Update an existing secret in the secrets vault.", "update", "POST", [new argData_1.ArgData("name", "string", true, "The name of the secret to update", false, false),
        new argData_1.ArgData("value", "Value", true, "The new value for the secret", false, true),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "deleteSecret", "/config/secret/{name}", "Delete an existing secret from the secrets vault.", "", "DELETE", [new argData_1.ArgData("name", "string", true, "The name of the secret to update", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "listSecrets", "/config/secrets", "Get the list of names of all the secrets in the vault", "", "GET", [], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "addAgent", "/config/server/{ctm}/agent", "Add an agent to Control-M Server. This command does not install or configure the agent. It only defines the agent in the system.", "", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the agent is going to be added to.", false, false),
        new argData_1.ArgData("body", "AddAgentParams", true, "", false, true),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "deleteAgent", "/config/server/{ctm}/agent/{agent}", "Delete an agent from a Control-M Server. This will not shut the agent down. It only disconnects and removes it from the list.", "", "DELETE", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the agent is connected to.", false, false),
        new argData_1.ArgData("agent", "string", true, "The name of the agent to delete.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "setAgentParameter", "/config/server/{ctm}/agent/{agent}/param/{name}", "Set the value of the specified parameter in the specified agent.", "set", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the agent is connected to.", false, false),
        new argData_1.ArgData("agent", "string", true, "The name of the agent to update.", false, false),
        new argData_1.ArgData("name", "string", true, "The parameter name.", false, false),
        new argData_1.ArgData("body", "Value", true, "The new parameter value.", false, true),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getAgentParameters", "/config/server/{ctm}/agent/{agent}/params", "Get all the parameters of the specified Control-M Agent.", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the agent is connected to.", false, false),
        new argData_1.ArgData("agent", "string", true, "The name of the agent to query.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getAgents", "/config/server/{ctm}/agents", "Get all the agents of the specified Control-M Server.", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server to query.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "addHostToHostgroup", "/config/server/{ctm}/hostgroup/{hostgroup}/agent", "Add an agent to hostgroup. Create the the hostgroup if it does not exist.", "", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the hostgroup belongs to.", false, false),
        new argData_1.ArgData("hostgroup", "string", true, "The hostgroup name", false, false),
        new argData_1.ArgData("body", "Host", true, "The hostname of the new agent", false, true),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "deleteHostFromGroup", "/config/server/{ctm}/hostgroup/{hostgroup}/agent/{host}", "Delete an agent from the specified hostgroup. If the group is empty it will also be deleted.", "", "DELETE", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the hostgroup belongs to.", false, false),
        new argData_1.ArgData("hostgroup", "string", true, "The hostgroup name", false, false),
        new argData_1.ArgData("host", "string", true, "The agent to be deleted", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getHostsInGroup", "/config/server/{ctm}/hostgroup/{hostgroup}/agents", "Get the agents that compose the specified hostgroup", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the hostgroup belongs to.", false, false),
        new argData_1.ArgData("hostgroup", "string", true, "The hostgroup name", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getHostgroups", "/config/server/{ctm}/hostgroups", "Get all the hostgroups of the specified Control-M Server.", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the hostgroups belong to.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getServerParameters", "/config/server/{ctm}/params", "Get all the parameters of the specified Control-M Server.", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server to query.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "addRemoteHost", "/config/server/{ctm}/remotehost", "Add a remote host to Control-M Server.", "", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the remote host is going to be added to.", false, false),
        new argData_1.ArgData("data", "AddRemoteHostParams", false, "The none default, advanced configuration data", false, true),
    ], "", "", "-f &lt;configuration file&gt;", []);
    cli.addOperation("ConfigApi", "config", "getRemoteHostProperties", "/config/server/{ctm}/remotehost/{remotehost}", "Get the remote host configuration properties from the Control-M Server", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the remote host  is connected to.", false, false),
        new argData_1.ArgData("remotehost", "string", true, "The name of the remote host.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "deleteRemoteHost", "/config/server/{ctm}/remotehost/{remotehost}", "Delete a remote host from a Control-M Server.", "", "DELETE", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the remote host is connected to.", false, false),
        new argData_1.ArgData("remotehost", "string", true, "The name of the remote host to delete.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "authorizeSshKnownRemotehost", "/config/server/{ctm}/remotehost/{remotehost}/authorize", "Authorized known ssh remote host.", "authorize", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server the remote host is connected to.", false, false),
        new argData_1.ArgData("remotehost", "string", true, "The name of the remote host.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getRemoteHosts", "/config/server/{ctm}/remotehosts", "Get all the remote hosts of the specified Control-M Server.", "", "GET", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server to query.", false, false),
    ], "", "", "", []);
    cli.addOperation("ConfigApi", "config", "getServers", "/config/servers", "Get the names and hostnames of all Control-M Servers in the system.", "", "GET", [], "", "", "", []);
    cli.addOperation("SamplesApi", "samples", "getSamples", "/samples", "List all samples defined in the system.", "!", "GET", [], "", "", "", []);
    cli.addOperation("SamplesApi", "samples", "addSample", "/samples", "Create a new sample in the system.", "", "POST", [new argData_1.ArgData("newSample", "NewSample", true, "Sample to add", false, true),
    ], "", "", "", []);
    cli.addOperation("SamplesApi", "samples", "addManySamples", "/samples/load", "Bulk create many samples by uploading a file.", "!", "POST", [new argData_1.ArgData("samplesFile", "any", true, "Samples file to upload.", false, false),
    ], "", "", "", []);
    cli.addOperation("SamplesApi", "samples", "findSampleById", "/samples/{sampleId}", "Get a specific sample.", "!", "GET", [new argData_1.ArgData("sampleId", "number", true, "ID of the sample to return.", false, false),
    ], "", "", "", []);
    cli.addOperation("SamplesApi", "samples", "deleteSample", "/samples/{sampleId}", "Deletes a single sample based on the ID supplied.", "", "DELETE", [new argData_1.ArgData("sampleId", "number", true, "ID of sample to delete", false, false),
    ], "", "", "", []);
    cli.addOperation("DeployApi", "deploy", "deployFile", "/deploy", "deploy the provided definition file (JSON, XML or zip) to Control-M", "!", "POST", [new argData_1.ArgData("definitionsFile", "any", true, "A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files.", false, false),
    ], "", "", "", []);
    cli.addOperation("DeployApi", "deploy", "getDeployedFolders", "/deploy/deployed/{controlM}/{folderName}", "Export currently deployed folders to XML.", "!", "GET", [new argData_1.ArgData("controlM", "string", true, "The name of the Control-M in which the folder(s) are deployed. Wildcards can be used.", false, false),
        new argData_1.ArgData("folderName", "string", true, "The name of the required folder(s). Wildcards can be used.", false, false),
    ], "", "", "", []);
    cli.addOperation("DeployApi", "deploy", "getDeployedFoldersNew", "/deploy/jobs", "Get definition of jobs and folders (in the desired format - JSON or XML) that match the requested search criteria.", "", "GET", [new argData_1.ArgData("format", "string", false, "Output format (json or xml)", false, false),
        new argData_1.ArgData("folder", "string", false, "", true, false),
        new argData_1.ArgData("ctm", "string", false, "", true, false),
    ], "", "Search fields are ctm and folder", "-s &lt;search query&gt;", ["format", "folder", "ctm"]);
    cli.addOperation("RunApi", "run", "runJobs", "/run", "Run jobs according to given definitions file (JSON or zip).", "!", "POST", [new argData_1.ArgData("jobDefinitionsFile", "any", true, "File that contains the definitions of the jobs to run. It can be a JSON file, or a zip file that can contain one or more JSON files, as well as account(s) information.", false, false),
    ], "{&quot;interactive&quot;:&quot;monitorPageURI&quot;}", "", "-i", []);
    cli.addOperation("RunApi", "run", "addEvent", "/run/event/{ctm}", "Add a new  event. date may be of format MMDD, ODAT to set current controlm date, STAT to set no date. default value is ODAT.", "", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server hosting the event.", false, false),
        new argData_1.ArgData("event", "EventParam", true, "The defined event name.", false, true),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "deleteEvent", "/run/event/{ctm}/{name}/{date}", "Delete a  event.", "", "DELETE", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server hosting the event.", false, false),
        new argData_1.ArgData("name", "string", true, "event name", false, false),
        new argData_1.ArgData("date", "string", true, "event date", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getEvents", "/run/events", "Get all events records for specific search.", "", "GET", [new argData_1.ArgData("ctm", "string", false, "Control-M Server filter.", true, false),
        new argData_1.ArgData("name", "string", false, "The event name filter.", true, false),
        new argData_1.ArgData("date", "string", false, "The event date filter.", true, false),
        new argData_1.ArgData("limit", "number", false, "maximum events to fetch (default 1000).", true, false),
    ], "", "Search fields are ctm=*, name=*, date=*", "-s &lt;search query&gt;", ["ctm", "name", "date", "limit"]);
    cli.addOperation("RunApi", "run", "confirmJob", "/run/job/{jobId}/confirm", "confirm a job that waits for confirmation", "confirm", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "deleteJob", "/run/job/{jobId}/delete", "mark delete as deleted", "delete", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "freeJob", "/run/job/{jobId}/free", "free the job", "free", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "holdJob", "/run/job/{jobId}/hold", "hold the job", "hold", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "killJob", "/run/job/{jobId}/kill", "Abort job execution.", "kill", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getJobLog", "/run/job/{jobId}/log", "Get the job execution log.", "", "GET", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getJobOutput", "/run/job/{jobId}/output", "Get the output returned from a job.", "", "GET", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
        new argData_1.ArgData("runNo", "number", false, "The execution number in case of multiple executions (0 will get the last execution&#39;s output)", false, false),
    ], "", "", "", ["runNo"]);
    cli.addOperation("RunApi", "run", "rerunJob", "/run/job/{jobId}/rerun", "Run an already executed job (again).", "rerun", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "runNow", "/run/job/{jobId}/runNow", "start a job immediately", "runNow", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "setToOK", "/run/job/{jobId}/setToOk", "set job&#39;s end status to OK, post processing action", "setToOk", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getJobStatus", "/run/job/{jobId}/status", "Get the job status.", "", "GET", [new argData_1.ArgData("jobId", "string", true, "Job ID returned from the run status action.", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "undeleteJob", "/run/job/{jobId}/undelete", "recover a mark for deletion job", "undelete", "POST", [new argData_1.ArgData("jobId", "string", true, "The job ID", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getJobsStatusByFilter", "/run/jobs/status", "Get status of jobs that match the requested search criteria.", "", "GET", [new argData_1.ArgData("limit", "number", false, "maximum jobs status to fetch (default 1000).", false, false),
        new argData_1.ArgData("jobname", "string", false, "", true, false),
        new argData_1.ArgData("ctm", "string", false, "", true, false),
        new argData_1.ArgData("application", "string", false, "", true, false),
        new argData_1.ArgData("subApplication", "string", false, "", true, false),
        new argData_1.ArgData("host", "string", false, "", true, false),
        new argData_1.ArgData("status", "string", false, "", true, false),
        new argData_1.ArgData("folder", "string", false, "", true, false),
        new argData_1.ArgData("description", "string", false, "", true, false),
    ], "", "Search fields are jobname, ctm, folder, host, application, subApplication, status and description", "-s &lt;search query&gt;", ["limit", "jobname", "ctm", "application", "subApplication", "host", "status", "folder", "description"]);
    cli.addOperation("RunApi", "run", "orderJobsInFolder", "/run/order", "Run jobs from selected folder according to given filter", "!", "POST", [new argData_1.ArgData("data", "OrderFolderParameters", true, "parameters to select the jobs to run", false, true),
    ], "{&quot;interactive&quot;:&quot;monitorPageURI&quot;}", "", "-i", []);
    cli.addOperation("RunApi", "run", "addResource", "/run/resource/{ctm}", "Add a new quantitative resource.", "", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server hosting the resource.", false, false),
        new argData_1.ArgData("resource", "ResourceParam", true, "The defined resource name.", false, true),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "updateResource", "/run/resource/{ctm}/{name}", "Update a quantitative resource.", "update", "POST", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server hosting the resource.", false, false),
        new argData_1.ArgData("name", "string", true, "Resource name", false, false),
        new argData_1.ArgData("max", "ResourceMax", true, "The defined resource name.", false, true),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "deleteResource", "/run/resource/{ctm}/{name}", "Delete a quantitative resource.", "", "DELETE", [new argData_1.ArgData("ctm", "string", true, "The Control-M Server hosting the resource.", false, false),
        new argData_1.ArgData("name", "string", true, "Resource name", false, false),
    ], "", "", "", []);
    cli.addOperation("RunApi", "run", "getResources", "/run/resources", "Get all resources records matching search.", "", "GET", [new argData_1.ArgData("ctm", "string", false, "Control-M Server filter.", true, false),
        new argData_1.ArgData("name", "string", false, "The resource name filter.", true, false),
    ], "", "Search fields are ctm=*, name=*", "-s &lt;search query&gt;", ["ctm", "name"]);
    cli.addOperation("RunApi", "run", "getJobsStatus", "/run/status/{runId}", "Run status of jobs started with the Run service.", "!", "GET", [new argData_1.ArgData("runId", "string", true, "Run ID returned from the run action.", false, false),
        new argData_1.ArgData("startIndex", "number", false, "The index of the job status from which to start. returning results", false, false),
    ], "{&quot;interactive&quot;:&quot;monitorPageURI&quot;}", "", "-i", ["startIndex"]);
    cli.addOperation("ReportingApi", "reporting", "getReportByName", "/reporting/report/{name}", "Retrives a report by name &lt;in the desired format - CSV or PDF&gt;.", "", "GET", [new argData_1.ArgData("name", "string", true, "The report name.", false, false),
        new argData_1.ArgData("format", "string", false, "", false, false),
    ], "{&quot;outputfile&quot;:&quot;reportURL&quot;}", "", "-o", ["format"]);
    cli.addOperation("SessionApi", "session", "doLogin", "/session/login", "Authenticate the user with the specified password and return a token that can be used later in subsequent requests to access Control-M.", "", "POST", [new argData_1.ArgData("credentials", "LoginCredentials", true, "The credentials to use for login.", false, true),
    ], "", "", "", []);
    cli.addOperation("SessionApi", "session", "doLogout", "/session/logout", "Disconnects the user session specified by the request authentication token, and removes it from the server memory.", "", "POST", [], "", "", "", []);
};
//# sourceMappingURL=generated.js.map