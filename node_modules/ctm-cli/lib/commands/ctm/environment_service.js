"use strict";
var fs = require("fs");
var path = require("path");
var environments_1 = require("../../util/environments");
var utilsCore = require("../../util/utilsCore");
var S = utilsCore.getLocaleString;
var log;
var environmentService;
function printEnvironments() {
    log.info(S("current environment: %s", environments_1.environments.getCurrentEnvironmentName()));
    log.info(S("environments: %s", JSON.stringify(environments_1.environments.getDisplayableEnvironments(), null, 2)));
}
function printEnvironment(envName, msg) {
    log.info(S(msg, envName));
    var env = environments_1.environments.getEnvironment(envName);
    log.info(S("%s: %s", envName, JSON.stringify(env.toDisplayable())));
}
function checkRootCertificateRequired() {
    if (!environments_1.environments.getRootCertificateRequired()) {
        log.warn(("ctm-cli is configured to accept self-signed certificates.\n").red.bold +
            "To accept only signed certificate you may run:\n" +
            "    ctm environment configure rootCertificateRequired true");
    }
}
function addEnvAction(name, args, description, action) {
    environmentService.command(name + " " + args).description(description).action(action).usage(args);
}
function init(cli) {
    log = cli.output;
    environmentService = cli
        .category("environment")
        .description("Define and select the Control-M environment");
    addEnvAction("configure", "<setting-name> [setting-value]", "configure global environment settings", function (settingName, settingValue) {
        try {
            var msg = "";
            if (environments_1.environments.setSetting(settingName, settingValue)) {
                msg = "Setting \'%s\' was set to \'%s\'.";
            }
            else {
                msg = "Setting \'%s\' is already set to \'%s\'. No change was done.";
            }
            log.info(S(msg, settingName, settingValue));
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("show", " ", "display environments settings", printEnvironments);
    addEnvAction("set", "<env>", "select current environment", function (envName) {
        try {
            environments_1.environments.setCurrentEnvironment(envName);
            printEnvironments();
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("delete", "<env>", "delete an environment", function (envName) {
        try {
            environments_1.environments.deleteEnvironment(envName);
            printEnvironments();
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("update", "<env> <name> <value>", "update an environment property. the property <name> can be endPoint, user or password", function (envName, propName, value) {
        try {
            environments_1.environments.updateEnvironment(envName, propName, value);
            printEnvironment(envName, "Environment \'%s\' was updated");
            checkRootCertificateRequired();
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("add", "<env> <endPoint> <user> <password>", "add a new environment", function (envName, endPoint, user, password) {
        try {
            environments_1.environments.addEnvironment(envName, endPoint, user, password);
            printEnvironment(envName, "Environment \'%s\' was created");
            checkRootCertificateRequired();
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("copy", "<env> <newEnv>", "duplicate an environment", function (envName, newEnvName) {
        try {
            environments_1.environments.copyEnvironment(envName, newEnvName);
            printEnvironment(newEnvName, S("Environment \'%s\' was copied to \'%s\'", envName));
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
    addEnvAction("load", "<enviromentsFile>", "load environments from file", function (environmentFile) {
        try {
            var pathEnvironmentsFile = path.resolve(environmentFile);
            if (!fs.existsSync(pathEnvironmentsFile)) {
                throw S("File %s not found", pathEnvironmentsFile);
            }
            environments_1.environments.loadFromFile(pathEnvironmentsFile);
            printEnvironments();
            checkRootCertificateRequired();
        }
        catch (error) {
            cli.exit(1, "error", error);
        }
    });
}
exports.init = init;
//# sourceMappingURL=environment_service.js.map