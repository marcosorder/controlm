var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var request = require('request');
var promise = require('bluebird');
var SuccessData = (function () {
    function SuccessData(message) {
        this.message = message;
    }
    return SuccessData;
})();
exports.SuccessData = SuccessData;
var AddRemoveSuccessData = (function () {
    function AddRemoveSuccessData(message, currentItems) {
        this.message = message;
        this.currentItems = currentItems;
    }
    return AddRemoveSuccessData;
})();
exports.AddRemoveSuccessData = AddRemoveSuccessData;
var ErrorData = (function () {
    function ErrorData(message, id, item, file, line, col) {
        this.message = message;
        this.id = id;
        this.item = item;
        this.file = file;
        this.line = line;
        this.col = col;
    }
    return ErrorData;
})();
exports.ErrorData = ErrorData;
var CtmDetailsList = (function (_super) {
    __extends(CtmDetailsList, _super);
    function CtmDetailsList() {
        _super.call(this);
    }
    return CtmDetailsList;
})(Array);
exports.CtmDetailsList = CtmDetailsList;
var ErrorList = (function () {
    function ErrorList(errors) {
        this.errors = errors;
    }
    return ErrorList;
})();
exports.ErrorList = ErrorList;
var LoginCredentials = (function () {
    function LoginCredentials(username, password) {
        this.username = username;
        this.password = password;
    }
    return LoginCredentials;
})();
exports.LoginCredentials = LoginCredentials;
var LoginResult = (function () {
    function LoginResult(username, token, version) {
        this.username = username;
        this.token = token;
        this.version = version;
    }
    return LoginResult;
})();
exports.LoginResult = LoginResult;
var RunResult = (function () {
    function RunResult(runId, statusURI, monitorPageURI) {
        this.runId = runId;
        this.statusURI = statusURI;
        this.monitorPageURI = monitorPageURI;
    }
    return RunResult;
})();
exports.RunResult = RunResult;
var ReportResult = (function () {
    function ReportResult(reportURL) {
        this.reportURL = reportURL;
    }
    return ReportResult;
})();
exports.ReportResult = ReportResult;
var StringListResult = (function (_super) {
    __extends(StringListResult, _super);
    function StringListResult() {
        _super.call(this);
    }
    return StringListResult;
})(Array);
exports.StringListResult = StringListResult;
var Host = (function () {
    function Host(host) {
        this.host = host;
    }
    return Host;
})();
exports.Host = Host;
var KeyValue = (function () {
    function KeyValue(name, value, defaultValue) {
        this.name = name;
        this.value = value;
        this.defaultValue = defaultValue;
    }
    return KeyValue;
})();
exports.KeyValue = KeyValue;
var KeyValueListResult = (function (_super) {
    __extends(KeyValueListResult, _super);
    function KeyValueListResult() {
        _super.call(this);
    }
    return KeyValueListResult;
})(Array);
exports.KeyValueListResult = KeyValueListResult;
var ResourceSet = (function (_super) {
    __extends(ResourceSet, _super);
    function ResourceSet() {
        _super.call(this);
    }
    return ResourceSet;
})(Array);
exports.ResourceSet = ResourceSet;
var Resource = (function () {
    function Resource(name, ctm, available, max, workloadPolicy) {
        this.name = name;
        this.ctm = ctm;
        this.available = available;
        this.max = max;
        this.workloadPolicy = workloadPolicy;
    }
    return Resource;
})();
exports.Resource = Resource;
var EventSet = (function (_super) {
    __extends(EventSet, _super);
    function EventSet() {
        _super.call(this);
    }
    return EventSet;
})(Array);
exports.EventSet = EventSet;
var Event = (function () {
    function Event(name, ctm, date) {
        this.name = name;
        this.ctm = ctm;
        this.date = date;
    }
    return Event;
})();
exports.Event = Event;
var JobStatusResult = (function () {
    function JobStatusResult(statuses, startIndex, itemsPerPage, returned, total, sort, nextURI, prevURI, monitorPageURI) {
        this.statuses = statuses;
        this.startIndex = startIndex;
        this.itemsPerPage = itemsPerPage;
        this.returned = returned;
        this.total = total;
        this.sort = sort;
        this.nextURI = nextURI;
        this.prevURI = prevURI;
        this.monitorPageURI = monitorPageURI;
    }
    return JobStatusResult;
})();
exports.JobStatusResult = JobStatusResult;
var JobRunStatus = (function () {
    function JobRunStatus(jobId, folderId, numberOfRuns, name, folder, type, status, startTime, endTime, jobJSON, outputURI, logURI) {
        this.jobId = jobId;
        this.folderId = folderId;
        this.numberOfRuns = numberOfRuns;
        this.name = name;
        this.folder = folder;
        this.type = type;
        this.status = status;
        this.startTime = startTime;
        this.endTime = endTime;
        this.jobJSON = jobJSON;
        this.outputURI = outputURI;
        this.logURI = logURI;
    }
    return JobRunStatus;
})();
exports.JobRunStatus = JobRunStatus;
var DeploymentFileResults = (function () {
    function DeploymentFileResults(deploymentFile, successfulFoldersCount, successfulSmartFoldersCount, successfulSubFoldersCount, successfulJobsCount, successfulConnectionProfilesCount, successfulDriversCount, deployedFolders, deployedDrivers, deployedConnectionProfiles, errors) {
        this.deploymentFile = deploymentFile;
        this.successfulFoldersCount = successfulFoldersCount;
        this.successfulSmartFoldersCount = successfulSmartFoldersCount;
        this.successfulSubFoldersCount = successfulSubFoldersCount;
        this.successfulJobsCount = successfulJobsCount;
        this.successfulConnectionProfilesCount = successfulConnectionProfilesCount;
        this.successfulDriversCount = successfulDriversCount;
        this.deployedFolders = deployedFolders;
        this.deployedDrivers = deployedDrivers;
        this.deployedConnectionProfiles = deployedConnectionProfiles;
        this.errors = errors;
    }
    return DeploymentFileResults;
})();
exports.DeploymentFileResults = DeploymentFileResults;
var DeploymentFileError = (function () {
    function DeploymentFileError(lines) {
        this.lines = lines;
    }
    return DeploymentFileError;
})();
exports.DeploymentFileError = DeploymentFileError;
var Sample = (function () {
    function Sample(id, title, description) {
        this.id = id;
        this.title = title;
        this.description = description;
    }
    return Sample;
})();
exports.Sample = Sample;
var NewSample = (function () {
    function NewSample(title, description) {
        this.title = title;
        this.description = description;
    }
    return NewSample;
})();
exports.NewSample = NewSample;
var SamplesLoadData = (function () {
    function SamplesLoadData(contentType, filename, size, content) {
        this.contentType = contentType;
        this.filename = filename;
        this.size = size;
        this.content = content;
    }
    return SamplesLoadData;
})();
exports.SamplesLoadData = SamplesLoadData;
var Value = (function () {
    function Value(value) {
        this.value = value;
    }
    return Value;
})();
exports.Value = Value;
var CtmDetails = (function () {
    function CtmDetails(name, host) {
        this.name = name;
        this.host = host;
    }
    return CtmDetails;
})();
exports.CtmDetails = CtmDetails;
var AddAgentParams = (function () {
    function AddAgentParams(host, port) {
        this.host = host;
        this.port = port;
    }
    return AddAgentParams;
})();
exports.AddAgentParams = AddAgentParams;
var EventParam = (function () {
    function EventParam(name, date) {
        this.name = name;
        this.date = date;
    }
    return EventParam;
})();
exports.EventParam = EventParam;
var ResourceParam = (function () {
    function ResourceParam(name, max) {
        this.name = name;
        this.max = max;
    }
    return ResourceParam;
})();
exports.ResourceParam = ResourceParam;
var ResourceMax = (function () {
    function ResourceMax(max) {
        this.max = max;
    }
    return ResourceMax;
})();
exports.ResourceMax = ResourceMax;
var AddRemoteHostParams = (function () {
    function AddRemoteHostParams(remotehost, port, encryptAlgorithm, compression, authorize, agents) {
        this.remotehost = remotehost;
        this.port = port;
        this.encryptAlgorithm = encryptAlgorithm;
        this.compression = compression;
        this.authorize = authorize;
        this.agents = agents;
    }
    return AddRemoteHostParams;
})();
exports.AddRemoteHostParams = AddRemoteHostParams;
var OrderFolderParameters = (function () {
    function OrderFolderParameters(ctm, folder, jobs) {
        this.ctm = ctm;
        this.folder = folder;
        this.jobs = jobs;
    }
    return OrderFolderParameters;
})();
exports.OrderFolderParameters = OrderFolderParameters;
var AgentDetails = (function () {
    function AgentDetails(nodeid, status) {
        this.nodeid = nodeid;
        this.status = status;
    }
    return AgentDetails;
})();
exports.AgentDetails = AgentDetails;
var AgentDetailsList = (function () {
    function AgentDetailsList(agents) {
        this.agents = agents;
    }
    return AgentDetailsList;
})();
exports.AgentDetailsList = AgentDetailsList;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
})();
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location === "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location === "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
})();
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
    };
    return OAuth;
})();
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
    };
    return VoidAuth;
})();
var ProvisionApi = (function () {
    function ProvisionApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ProvisionApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    ProvisionApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    ProvisionApi.prototype.getImages = function (os) {
        var path = this.url + this.basePath + '/provision/images/{os}'
            .replace('{' + 'os' + '}', String(os));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!os) {
            throw new Error('Missing required parameter os when calling getImages');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'StringListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return ProvisionApi;
})();
exports.ProvisionApi = ProvisionApi;
var BuildApi = (function () {
    function BuildApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(BuildApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    BuildApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    BuildApi.prototype.buildFile = function (definitionsFile) {
        var path = this.url + this.basePath + '/build';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!definitionsFile) {
            throw new Error('Missing required parameter definitionsFile when calling buildFile');
        }
        var useFormData = false;
        if (definitionsFile !== undefined) {
            formParams['definitionsFile'] = require('fs').createReadStream(definitionsFile);
        }
        useFormData = true;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'Array<DeploymentFileResults>' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return BuildApi;
})();
exports.BuildApi = BuildApi;
var ConfigApi = (function () {
    function ConfigApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ConfigApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    ConfigApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    ConfigApi.prototype.addSecret = function (nameValue) {
        var path = this.url + this.basePath + '/config/secret';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!nameValue) {
            throw new Error('Missing required parameter nameValue when calling addSecret');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: nameValue,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.updateSecret = function (name, value) {
        var path = this.url + this.basePath + '/config/secret/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!name) {
            throw new Error('Missing required parameter name when calling updateSecret');
        }
        if (!value) {
            throw new Error('Missing required parameter value when calling updateSecret');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: value,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.deleteSecret = function (name) {
        var path = this.url + this.basePath + '/config/secret/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!name) {
            throw new Error('Missing required parameter name when calling deleteSecret');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.listSecrets = function () {
        var path = this.url + this.basePath + '/config/secrets';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'StringListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.addAgent = function (ctm, body) {
        var path = this.url + this.basePath + '/config/server/{ctm}/agent'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling addAgent');
        }
        if (!body) {
            throw new Error('Missing required parameter body when calling addAgent');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: body,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.deleteAgent = function (ctm, agent) {
        var path = this.url + this.basePath + '/config/server/{ctm}/agent/{agent}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'agent' + '}', String(agent));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling deleteAgent');
        }
        if (!agent) {
            throw new Error('Missing required parameter agent when calling deleteAgent');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.setAgentParameter = function (ctm, agent, name, body) {
        var path = this.url + this.basePath + '/config/server/{ctm}/agent/{agent}/param/{name}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'agent' + '}', String(agent))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling setAgentParameter');
        }
        if (!agent) {
            throw new Error('Missing required parameter agent when calling setAgentParameter');
        }
        if (!name) {
            throw new Error('Missing required parameter name when calling setAgentParameter');
        }
        if (!body) {
            throw new Error('Missing required parameter body when calling setAgentParameter');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: body,
            json: 'KeyValue' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getAgentParameters = function (ctm, agent) {
        var path = this.url + this.basePath + '/config/server/{ctm}/agent/{agent}/params'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'agent' + '}', String(agent));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getAgentParameters');
        }
        if (!agent) {
            throw new Error('Missing required parameter agent when calling getAgentParameters');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'KeyValueListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getAgents = function (ctm) {
        var path = this.url + this.basePath + '/config/server/{ctm}/agents'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getAgents');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'AgentDetailsList' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.addHostToHostgroup = function (ctm, hostgroup, body) {
        var path = this.url + this.basePath + '/config/server/{ctm}/hostgroup/{hostgroup}/agent'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'hostgroup' + '}', String(hostgroup));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling addHostToHostgroup');
        }
        if (!hostgroup) {
            throw new Error('Missing required parameter hostgroup when calling addHostToHostgroup');
        }
        if (!body) {
            throw new Error('Missing required parameter body when calling addHostToHostgroup');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: body,
            json: 'AddRemoveSuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.deleteHostFromGroup = function (ctm, hostgroup, host) {
        var path = this.url + this.basePath + '/config/server/{ctm}/hostgroup/{hostgroup}/agent/{host}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'hostgroup' + '}', String(hostgroup))
            .replace('{' + 'host' + '}', String(host));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling deleteHostFromGroup');
        }
        if (!hostgroup) {
            throw new Error('Missing required parameter hostgroup when calling deleteHostFromGroup');
        }
        if (!host) {
            throw new Error('Missing required parameter host when calling deleteHostFromGroup');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'AddRemoveSuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getHostsInGroup = function (ctm, hostgroup) {
        var path = this.url + this.basePath + '/config/server/{ctm}/hostgroup/{hostgroup}/agents'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'hostgroup' + '}', String(hostgroup));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getHostsInGroup');
        }
        if (!hostgroup) {
            throw new Error('Missing required parameter hostgroup when calling getHostsInGroup');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'StringListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getHostgroups = function (ctm) {
        var path = this.url + this.basePath + '/config/server/{ctm}/hostgroups'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getHostgroups');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'StringListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getServerParameters = function (ctm) {
        var path = this.url + this.basePath + '/config/server/{ctm}/params'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getServerParameters');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'KeyValueListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.addRemoteHost = function (ctm, data) {
        var path = this.url + this.basePath + '/config/server/{ctm}/remotehost'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling addRemoteHost');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: data,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getRemoteHostProperties = function (ctm, remotehost) {
        var path = this.url + this.basePath + '/config/server/{ctm}/remotehost/{remotehost}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'remotehost' + '}', String(remotehost));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getRemoteHostProperties');
        }
        if (!remotehost) {
            throw new Error('Missing required parameter remotehost when calling getRemoteHostProperties');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'AddRemoteHostParams' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.deleteRemoteHost = function (ctm, remotehost) {
        var path = this.url + this.basePath + '/config/server/{ctm}/remotehost/{remotehost}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'remotehost' + '}', String(remotehost));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling deleteRemoteHost');
        }
        if (!remotehost) {
            throw new Error('Missing required parameter remotehost when calling deleteRemoteHost');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.authorizeSshKnownRemotehost = function (ctm, remotehost) {
        var path = this.url + this.basePath + '/config/server/{ctm}/remotehost/{remotehost}/authorize'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'remotehost' + '}', String(remotehost));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling authorizeSshKnownRemotehost');
        }
        if (!remotehost) {
            throw new Error('Missing required parameter remotehost when calling authorizeSshKnownRemotehost');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getRemoteHosts = function (ctm) {
        var path = this.url + this.basePath + '/config/server/{ctm}/remotehosts'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling getRemoteHosts');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'StringListResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    ConfigApi.prototype.getServers = function () {
        var path = this.url + this.basePath + '/config/servers';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'CtmDetailsList' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return ConfigApi;
})();
exports.ConfigApi = ConfigApi;
var SamplesApi = (function () {
    function SamplesApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SamplesApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    SamplesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    SamplesApi.prototype.getSamples = function () {
        var path = this.url + this.basePath + '/samples';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'Array<Sample>' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    SamplesApi.prototype.addSample = function (newSample) {
        var path = this.url + this.basePath + '/samples';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!newSample) {
            throw new Error('Missing required parameter newSample when calling addSample');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: newSample,
            json: 'AddRemoveSuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    SamplesApi.prototype.addManySamples = function (samplesFile) {
        var path = this.url + this.basePath + '/samples/load';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!samplesFile) {
            throw new Error('Missing required parameter samplesFile when calling addManySamples');
        }
        var useFormData = false;
        if (samplesFile !== undefined) {
            formParams['samplesFile'] = require('fs').createReadStream(samplesFile);
        }
        useFormData = true;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SamplesLoadData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    SamplesApi.prototype.findSampleById = function (sampleId) {
        var path = this.url + this.basePath + '/samples/{sampleId}'
            .replace('{' + 'sampleId' + '}', String(sampleId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!sampleId) {
            throw new Error('Missing required parameter sampleId when calling findSampleById');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'Sample' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    SamplesApi.prototype.deleteSample = function (sampleId) {
        var path = this.url + this.basePath + '/samples/{sampleId}'
            .replace('{' + 'sampleId' + '}', String(sampleId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!sampleId) {
            throw new Error('Missing required parameter sampleId when calling deleteSample');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return SamplesApi;
})();
exports.SamplesApi = SamplesApi;
var DeployApi = (function () {
    function DeployApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DeployApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    DeployApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    DeployApi.prototype.deployFile = function (definitionsFile) {
        var path = this.url + this.basePath + '/deploy';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!definitionsFile) {
            throw new Error('Missing required parameter definitionsFile when calling deployFile');
        }
        var useFormData = false;
        if (definitionsFile !== undefined) {
            formParams['definitionsFile'] = require('fs').createReadStream(definitionsFile);
        }
        useFormData = true;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'Array<DeploymentFileResults>' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    DeployApi.prototype.getDeployedFolders = function (controlM, folderName) {
        var path = this.url + this.basePath + '/deploy/deployed/{controlM}/{folderName}'
            .replace('{' + 'controlM' + '}', String(controlM))
            .replace('{' + 'folderName' + '}', String(folderName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!controlM) {
            throw new Error('Missing required parameter controlM when calling getDeployedFolders');
        }
        if (!folderName) {
            throw new Error('Missing required parameter folderName when calling getDeployedFolders');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'string' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    DeployApi.prototype.getDeployedFoldersNew = function (format, folder, ctm) {
        var path = this.url + this.basePath + '/deploy/jobs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (format !== undefined) {
            queryParameters['format'] = format;
        }
        if (folder !== undefined) {
            queryParameters['folder'] = folder;
        }
        if (ctm !== undefined) {
            queryParameters['ctm'] = ctm;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'string' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return DeployApi;
})();
exports.DeployApi = DeployApi;
var RunApi = (function () {
    function RunApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RunApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    RunApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    RunApi.prototype.runJobs = function (jobDefinitionsFile) {
        var path = this.url + this.basePath + '/run';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobDefinitionsFile) {
            throw new Error('Missing required parameter jobDefinitionsFile when calling runJobs');
        }
        var useFormData = false;
        if (jobDefinitionsFile !== undefined) {
            formParams['jobDefinitionsFile'] = require('fs').createReadStream(jobDefinitionsFile);
        }
        useFormData = true;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'RunResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.addEvent = function (ctm, event) {
        var path = this.url + this.basePath + '/run/event/{ctm}'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling addEvent');
        }
        if (!event) {
            throw new Error('Missing required parameter event when calling addEvent');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: event,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.deleteEvent = function (ctm, name, date) {
        var path = this.url + this.basePath + '/run/event/{ctm}/{name}/{date}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'date' + '}', String(date));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling deleteEvent');
        }
        if (!name) {
            throw new Error('Missing required parameter name when calling deleteEvent');
        }
        if (!date) {
            throw new Error('Missing required parameter date when calling deleteEvent');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getEvents = function (ctm, name, date, limit) {
        var path = this.url + this.basePath + '/run/events';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (ctm !== undefined) {
            queryParameters['ctm'] = ctm;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (date !== undefined) {
            queryParameters['date'] = date;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'EventSet' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.confirmJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/confirm'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling confirmJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.deleteJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/delete'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling deleteJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.freeJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/free'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling freeJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.holdJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/hold'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling holdJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.killJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/kill'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling killJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getJobLog = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/log'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling getJobLog');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'string' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getJobOutput = function (jobId, runNo) {
        var path = this.url + this.basePath + '/run/job/{jobId}/output'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling getJobOutput');
        }
        if (runNo !== undefined) {
            queryParameters['runNo'] = runNo;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'string' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.rerunJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/rerun'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling rerunJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'JobRunStatus' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.runNow = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/runNow'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling runNow');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.setToOK = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/setToOk'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling setToOK');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getJobStatus = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/status'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling getJobStatus');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'JobRunStatus' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.undeleteJob = function (jobId) {
        var path = this.url + this.basePath + '/run/job/{jobId}/undelete'
            .replace('{' + 'jobId' + '}', String(jobId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!jobId) {
            throw new Error('Missing required parameter jobId when calling undeleteJob');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getJobsStatusByFilter = function (limit, jobname, ctm, application, subApplication, host, status, folder, description) {
        var path = this.url + this.basePath + '/run/jobs/status';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (jobname !== undefined) {
            queryParameters['jobname'] = jobname;
        }
        if (ctm !== undefined) {
            queryParameters['ctm'] = ctm;
        }
        if (application !== undefined) {
            queryParameters['application'] = application;
        }
        if (subApplication !== undefined) {
            queryParameters['subApplication'] = subApplication;
        }
        if (host !== undefined) {
            queryParameters['host'] = host;
        }
        if (status !== undefined) {
            queryParameters['status'] = status;
        }
        if (folder !== undefined) {
            queryParameters['folder'] = folder;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'JobStatusResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.orderJobsInFolder = function (data) {
        var path = this.url + this.basePath + '/run/order';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!data) {
            throw new Error('Missing required parameter data when calling orderJobsInFolder');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: data,
            json: 'RunResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.addResource = function (ctm, resource) {
        var path = this.url + this.basePath + '/run/resource/{ctm}'
            .replace('{' + 'ctm' + '}', String(ctm));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling addResource');
        }
        if (!resource) {
            throw new Error('Missing required parameter resource when calling addResource');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: resource,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.updateResource = function (ctm, name, max) {
        var path = this.url + this.basePath + '/run/resource/{ctm}/{name}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling updateResource');
        }
        if (!name) {
            throw new Error('Missing required parameter name when calling updateResource');
        }
        if (!max) {
            throw new Error('Missing required parameter max when calling updateResource');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: max,
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.deleteResource = function (ctm, name) {
        var path = this.url + this.basePath + '/run/resource/{ctm}/{name}'
            .replace('{' + 'ctm' + '}', String(ctm))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!ctm) {
            throw new Error('Missing required parameter ctm when calling deleteResource');
        }
        if (!name) {
            throw new Error('Missing required parameter name when calling deleteResource');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getResources = function (ctm, name) {
        var path = this.url + this.basePath + '/run/resources';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (ctm !== undefined) {
            queryParameters['ctm'] = ctm;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'ResourceSet' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    RunApi.prototype.getJobsStatus = function (runId, startIndex) {
        var path = this.url + this.basePath + '/run/status/{runId}'
            .replace('{' + 'runId' + '}', String(runId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!runId) {
            throw new Error('Missing required parameter runId when calling getJobsStatus');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'JobStatusResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return RunApi;
})();
exports.RunApi = RunApi;
var ReportingApi = (function () {
    function ReportingApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ReportingApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    ReportingApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    ReportingApi.prototype.getReportByName = function (name, format) {
        var path = this.url + this.basePath + '/reporting/report/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!name) {
            throw new Error('Missing required parameter name when calling getReportByName');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'ReportResult' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return ReportingApi;
})();
exports.ReportingApi = ReportingApi;
var SessionApi = (function () {
    function SessionApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'https://localhost';
        this.defaultHeaders = {};
        this.authentications = {
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SessionApi.prototype, "apiKey", {
        set: function (key) {
            this.authentications.Bearer.apiKey = key;
        },
        enumerable: true,
        configurable: true
    });
    SessionApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    SessionApi.prototype.doLogin = function (credentials) {
        var path = this.url + this.basePath + '/session/login';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (!credentials) {
            throw new Error('Missing required parameter credentials when calling doLogin');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            body: credentials,
            json: 'LoginResult' !== 'string'
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    SessionApi.prototype.doLogout = function () {
        var path = this.url + this.basePath + '/session/logout';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: encodeURI(path),
            json: 'SuccessData' !== 'string'
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (!body && response.statusCode == 400) {
                    deferred.reject('\'Bad request\' received when trying to reach: ' + requestOptions['uri']);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        deferred.resolve({ response: response, body: body });
                    }
                    else {
                        deferred.reject({ response: response, body: body });
                    }
                }
            }
        });
        return deferred.promise;
    };
    return SessionApi;
})();
exports.SessionApi = SessionApi;
//# sourceMappingURL=api.js.map